# generated by datamodel-codegen:
#   filename:  openapi.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional, Union, Dict

from pydantic import BaseModel, Field, confloat, constr


class Conditions(BaseModel):
    """
        conditions that must apply to be member of the group
    Expample: 'total_sales > 100', meaning if the customer have sales more than 100, then he may enter this group

    these conditions in case you want to use auto assign customers to group.
    """

    type: Optional[str] = Field(None, description='Condition type')
    symbol: Optional[str] = Field(None, description='condition operator')
    value: Optional[float] = Field(
        None, description='condition after to be after the operator'
    )


class Headers(BaseModel):
    """
    Webhook headers
    """

    Authorization: Optional[str] = Field(
        None, description='`required if` headers.* not empty'
    )
    Accept_Language: Optional[str] = Field(
        None, alias='Accept-Language', description='`required if` headers.* not empty'
    )


class Webhook(BaseModel):
    id: Optional[int] = Field(None, description='Webhook ID')
    name: Optional[str] = Field(None, description='Webhook name')
    event: Optional[str] = Field(
        None, description='Webhook event ( one from events list )'
    )
    url: Optional[str] = Field(None, description='Webhook URL')
    headers: Optional[Headers] = Field(None, description='Webhook headers')


class Tax(BaseModel):
    """
    Detailed structure of the tax model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Tax id')
    tax: Optional[float] = Field(None, description='Tax rate')
    status: Optional[str] = Field(None, description='Tax status')
    country: Optional[str] = Field(
        None,
        description="Country to apply the tax on, 'null' values for taxes to apply on all countries",
    )


class Payment(BaseModel):
    """
    Detailed structure of the payment model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Payment method ID')
    slug: Optional[str] = Field(None, description='Payment method slug')
    name: Optional[str] = Field(None, description='Payment method name')


class Product(BaseModel):
    """
    Detailed structure of the product model object showing its fields and data types.
    """

    name: Optional[str] = Field(None, description='Product name')
    price: Optional[float] = Field(None, description='Product price')
    status: Optional[str] = Field(
        None, description="The product status. available values 'hidden','sale','out'"
    )
    product_type: Optional[str] = Field(None, description='Product type')
    # Code modified
    quantity: Optional[int] = Field(None, description='Product quantity')
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )
    description: Optional[str] = Field(None, description='Product description')
    categories: Optional[List] = Field(
        None,
        description='a list of categories ids, that will be associate with the product.',
    )
    min_amount_donating: Optional[float] = Field(
        None, description='Minimum donating amount. '
    )
    max_amount_donating: Optional[float] = Field(
        None, description='Maximum donating amount. '
    )
    sale_price: Optional[float] = Field(None, description='Product sale price')
    cost_price: Optional[float] = Field(None, description='Product cost price')
    sale_end: Optional[str] = Field(None, description='Product sale end')
    require_shipping: Optional[bool] = Field(
        None, description='determent if the product require shipping or not.'
    )
    maximum_quantity_per_order: Optional[float] = Field(
        None, description='Maximum product quantity for each order.'
    )
    weight: Optional[float] = Field(
        None, description='if applicable the weight of the product.'
    )
    sku: Optional[str] = Field(None, description='Product sku')
    hide_quantity: Optional[bool] = Field(
        None, description='weather to hide the quantity or not.'
    )
    enable_upload_image: Optional[bool] = Field(
        None,
        description='To enable upload image for the product when the customer add it to cart.',
    )
    enable_note: Optional[bool] = Field(
        None,
        description='To enable add note for the product when customer add it to cart.\n\n',
    )
    pinned: Optional[bool] = Field(
        None, description='if you want to pin the product in categories page.'
    )
    active_advance: Optional[bool] = Field(
        None, description='if you want to activate product advanced option.'
    )
    subtitle: Optional[str] = Field(
        None,
        description='Subtitle of the product will display under product name in pages.\n\n',
    )
    promotion_title: Optional[str] = Field(
        None, description='A label to display in the main image.'
    )
    metadata_title: Optional[str] = Field(
        None, description='Metadata title. for SEO purposes'
    )
    metadata_description: Optional[str] = Field(
        None, description='Metadata description. for SEO purposes'
    )
    brand_id: Optional[int] = Field(None, description='The brand ID of the product')
    tags: Optional[List[float]] = Field(None, description='The Product tags array.')


class Price(BaseModel):
    """
    The additional price which will added to product price when customer add select his value, or you can set 0 if you don't want add any additional price. for product.type service and food only
    """

    amount: Optional[str]
    currency: Optional[str]


class Status(Enum):
    """
    Category status ( active , hidden )
    """

    active = 'active'
    hidden = 'hidden'


class Brand(BaseModel):
    """
    Detailed structure of the brand model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Brand ID')
    name: Optional[str] = Field(None, description='Brand name')
    description: Optional[str] = Field(None, description='Brand description')
    banner: Optional[str] = Field(None, description='Brand banner')
    logo: Optional[str] = Field(None, description='Brand Logo')
    ar_char: Optional[str] = Field(None, description='Brand Arabic character')
    en_char: Optional[str] = Field(None, description='Brand English character')


class Location(BaseModel):
    """
    Branch location on map ( longitude, latitude )
    """

    lat: Optional[str] = Field(None, description='latitude')
    lng: Optional[str] = Field(None, description='longitude')


class Contacts(BaseModel):
    """
    Branch contacts
    """

    phone: Optional[str] = Field(None, description='Branch phone number')
    whatsapp: Optional[str] = Field(None, description='Branch whatsapp number')
    telephone: Optional[str] = Field(None, description='Branch telephone number')


class ClosestTime(BaseModel):
    """
    The time when the branch will be closed based on the request time. Each request may have a different value.
    """

    from_: Optional[str] = Field(
        None, alias='from', description='Branch will be closed from '
    )
    to: Optional[str] = Field(None, description='Branch will be closed to  ')


class Enabled(Enum):
    """
    "on", "off"
    """

    on = 'on'
    off = 'off'


class NameOfTheDay(BaseModel):
    """
    Days of the week ( sunday,monday,...)
    """

    enabled: Optional[Enabled] = Field(None, description='"on", "off"')
    from_: Optional[List[str]] = Field(
        None,
        alias='from',
        description='[         \\"08:00\\",         \\"19:00\\"       ]',
    )
    to: Optional[List[str]] = Field(
        None, description='[         \\"08:00\\",         \\"19:00\\"       ]'
    )


class WorkingHours(BaseModel):
    """
    Branch working hours - `required if` branch.type is \"branch\"
    """

    nameOfTheDay: Optional[NameOfTheDay] = Field(
        None, description='Days of the week ( sunday,monday,...)'
    )


class Type(Enum):
    """
    Branch type (branch - warehouse)
    """

    branch = 'branch'
    warehouse = 'warehouse'


class Country(BaseModel):
    """
    Detailed structure of the country model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Country ID')
    name: Optional[str] = Field(None, description='Country name')
    name_en: Optional[str] = Field(None, description='Country English name')
    code: Optional[str] = Field(None, description='Country iso code')
    mobile_code: Optional[str] = Field(None, description='Country mobile code')


class City(BaseModel):
    """
    Detailed structure of the city model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='City ID')
    name: Optional[str] = Field(None, description='City name')
    name_en: Optional[str] = Field(None, description='City English name')


class Pagination(BaseModel):
    """
    For a better response behavior as well as maintain the best security level, All retrieving API endpoints use a mechanism to retrieve data in chunks called pagination.  Pagination working by return only a specific number of records in each response, and through passing the page number you can navigate the different pages.
    """

    count: Optional[float] = Field(None, description='number of returned results')
    total: Optional[float] = Field(None, description='number of all results')
    perPage: Optional[confloat(le=65.0)] = Field(
        None, description='number of results per page'
    )
    currentPage: Optional[float] = Field(None, description='number of current page')
    totalPages: Optional[float] = Field(None, description='number of total pages ')
    # links: Optional[List[str]] = Field(
    #     None, description='array of linkes to next and previous pages'
    # )
    # Custom Code
    links: Optional[Dict[str, str]] = Field(None)


class OrderStatus(BaseModel):
    """
    Detailed structure of the order status model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Order status ID')
    name: Optional[str] = Field(None, description='Order status name')
    color: Optional[str] = Field(None, description='Order status color')
    icon: Optional[str] = Field(None, description='Order status icon')
    hex_icon: Optional[float] = Field(None, description='Order status hex icon')
    web_icon: Optional[str] = Field(None, description='Order status web icon')
    sort_order: Optional[float] = Field(None, description='Order status sort order')


class Promotion(BaseModel):
    """
    A label to display in the main image. Product promotion details
    """

    title: Optional[str] = Field(None, description='Promotion title')
    sub_title: Optional[str] = Field(None, description='Promotion sub title')


class Type1(Enum):
    """
    Product type
    """

    product = 'product'
    service = 'service'
    group_products = 'group_products'
    codes = 'codes'
    digital = 'digital'
    food = 'food'
    donating = 'donating'


class Price1(BaseModel):
    """
    Product price details
    """

    amount: Optional[float] = Field(None, description='Product price amount')
    currency: Optional[str] = Field(None, description='Product price currency')


class Status1(Enum):
    """
    Product status
    """

    none = 'none'
    sale = 'sale'
    out = 'out'
    hidden = 'hidden'
    deleted = 'deleted'


class SalePrice(BaseModel):
    """
    Product sale price details
    """

    amount: Optional[float] = Field(None, description='Product sale price amount')
    currency: Optional[str] = Field(None, description='Product sale price currency')


class Type2(Enum):
    """
    Product images type (image)
    """

    image = 'image'
    video = 'video'


class Image(BaseModel):
    id: Optional[int] = Field(None, description='product image ID')
    url: Optional[str] = Field(None, description='Product images url')
    alt: Optional[str] = Field(None, description='Product images alternative text')
    video_url: Optional[str]
    type: Optional[Type2] = Field(None, description='Product images type (image)')
    sort: Optional[float] = Field(None, description='Product images sort number')


class Rating(BaseModel):
    """
    Product rating details
    """

    total: Optional[int] = Field(None, description='Product rating total')
    count: Optional[int] = Field(None, description='Product rating count')
    rate: Optional[float] = Field(None, description='Product rating rate')


class RegularPrice(BaseModel):
    """
    Product regular price details
    """

    amount: Optional[float] = Field(None, description='Product regular price amount')
    currency: Optional[str] = Field(None, description='Product regular price currency')


class Features(BaseModel):
    """
    Products features
    """

    show_you_may_like: Optional[bool] = Field(
        None, description='Show "you may like" or not'
    )
    show_rating: Optional[bool] = Field(None, description='Show rating')
    availability_notify: Optional[Union[int, str, bool]]


class Price2(BaseModel):
    """
    Product opion price
    """

    amount: Optional[float] = Field(None, description='Product opion price amount')
    currency: Optional[str] = Field(None, description='Product option price currency')


class RegularPrice1(BaseModel):
    """
    Product option regular price details
    """

    amount: Optional[float] = Field(
        None, description='Product option  regular price amount'
    )
    currency: Optional[str] = Field(
        None, description='Product option regular price curr'
    )


class Sku(BaseModel):
    id: Optional[int] = Field(None, description='Product opion sku ID')
    price: Optional[Price2] = Field(None, description='Product opion price')
    regular_price: Optional[RegularPrice1] = Field(
        None, description='Product option regular price details'
    )
    stock_quantity: Optional[Optional[int]] = Field(
        None, description='Product option stock quantity'
    )
    in_stock: Optional[Optional[bool]] = Field(
        None, description='Product option  in stock or not'
    )
    weight: Optional[Optional[str]] = Field(None, description='Product option weight')
    dimensions: Optional[Optional[str]] = Field(
        None, description='Product option dimensions'
    )
    barcode: Optional[Optional[str]] = Field(None, description='Product option barcode')
    related_options: Optional[List[int]] = Field(
        None, description='Product option related options'
    )


class Visibility(Enum):
    """
    Product option visiblity based on a condition. used only for products with type "food", "service".
    """

    always = 'always'
    on_condition = 'on_condition'


class VisibilityConditionType(Enum):
    """
    Product option visiblity condition type ( < , > , = , !=)
    """

    _ = '>'
    __1 = '<'
    __2 = '='
    __ = '!='


class OrderTag(BaseModel):
    """
    Detailed structure of the orders tag model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Order tag id')
    name: Optional[str] = Field(None, description='Order tag name')


class Buy1(BaseModel):
    """
    Details of what should be bought to get the offer
    """

    type: Optional[str] = Field(
        None,
        description='required-if `offer_type = buy_x_get_y`\n\nValues `product`,`category`',
    )
    min_amount: Optional[float] = Field(None, description='')
    quantity: Optional[confloat(ge=1.0)] = Field(
        None, description='required-if `offer_type = buy_x_get_y`'
    )
    products: Optional[List[int]] = Field(
        None, description='required-if buy.type = product\n\nProducts IDs as array'
    )
    categories: Optional[List[int]] = Field(
        None, description='required-if `buy.type = category`. Categoies IDs as array'
    )
    payment_methods: Optional[List[int]] = Field(
        None,
        description='required-if applied_to = paymentMethod\n\nPayment Methods IDs',
    )


class Get1(BaseModel):
    """
    Details of offer
    """

    type: Optional[str] = Field(
        None,
        description='required-if `offer_type = buy_x_get_y`\n\nValues `product`,`category`',
    )
    discount_type: Optional[str] = Field(
        None,
        description='if `offer_type = buy_x_get_y`\n\nValues: `percentage`, `free-product`\n\n',
    )
    discount_amount: float = Field(
        ..., description='required unless get.discount_type = free-product\n\n'
    )
    quantity: Optional[float] = Field(None, description='if offer_type =buy_x_get_y')
    products: Optional[List[int]] = Field(
        None, description='if get.type = product\n\nProducts IDs as array'
    )
    categories: Optional[List[int]] = Field(None, description='if get.type = category')


class SpeicalOfferRequest(BaseModel):
    name: constr(max_length=255) = Field(..., description='The offer name.')
    applied_channel: str = Field(
        ..., description='`browser` - `application` - `browser_and_application`'
    )
    offer_type: str = Field(
        ..., description='The offer type. values [buy_x_get_y|percentage|fixed_amount]'
    )
    applied_to: Optional[str] = Field(
        None,
        description='required unless offer_type = buy_x_get_y\n\nThe Target of the offer.\n\nValues: order,product,category,paymentMethod',
    )
    expiry_date: Optional[str] = Field(None, description='The offer end date')
    min_purchase_amount: Optional[float] = Field(
        None, description='The minimum order total amount to activate this offer.'
    )
    min_items_count: Optional[float] = Field(
        None, description='The minimum order items count to activate this offer.'
    )
    buy: Optional[Buy1] = Field(
        None, description='Details of what should be bought to get the offer'
    )
    get: Optional[Get1] = Field(None, description='Details of offer')


class BrandRequest(BaseModel):
    name: str = Field(..., description='Brand name')
    description: Optional[str] = Field(None, description='Brand Description')
    logo: bytes = Field(..., description='Brand logo ( string or file )')
    banner: Optional[bytes] = Field(None, description='Brand banner ( string or file )')


class BrandResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Brand]


class BrandsResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Response status code')
    data: Optional[List[Brand]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class Contacts1(BaseModel):
    """
    Branch contacts


    """

    phone: str = Field(..., description='Branch phone number')
    whatsapp: str = Field(..., description='Branch whatsapp number\n\n')
    telephone: str = Field(..., description='Branch telephone number')


class NameOfTheDay1(NameOfTheDay):
    """
    Days of the week ( sunday,monday,...)
    """

    pass


class WorkingHours1(BaseModel):
    """
    Branch working hours - `required if` branch.type is \"branch\"
    """

    nameOfTheDay: Optional[NameOfTheDay1] = Field(
        None, description='Days of the week ( sunday,monday,...)'
    )


class BranchRequest(BaseModel):
    name: str = Field(..., description='Branch name\n\n')
    city_id: float = Field(..., description='Branch City ID')
    country_id: float = Field(..., description='Branch Country ID')
    location: str = Field(
        ..., description='Branch location on map ( longitude, latitude )\n\n'
    )
    cod_cost: Optional[str] = Field(None, description='Cash on delivery cost value\n\n')
    is_cod_available: Optional[bool] = Field(
        None, description='Cash on delivery availability status\n\n'
    )
    type: str = Field(..., description='Branch type (branch - warehouse)')
    is_default: Optional[bool] = Field(
        None, description='Is this branch the default branch for all operations or not.'
    )
    address_description: str = Field(
        ..., description='Branch detailed address description'
    )
    street: str = Field(..., description='Branch street')
    local: str = Field(
        ...,
        description='Represents the area that consists of all these buildings. (Neighborhood)',
    )
    postal_code: str = Field(..., description='Branch postal code')
    contacts: Contacts1 = Field(..., description='Branch contacts\n\n')
    preparation_time: Optional[str] = Field(
        None, description='Needed time to get an order ready for shipping or pickup'
    )
    working_hours: Optional[WorkingHours1] = Field(
        None,
        description='Branch working hours - `required if` branch.type is \\"branch\\"',
    )


class CustomerRequest(BaseModel):
    first_name: str = Field(..., description='The customer first name')
    last_name: str = Field(..., description='The customer last name')
    mobile: str = Field(
        ..., description='The mobile of the customer without country code'
    )
    mobile_code_country: Optional[str] = Field(None, description='mobile country code')
    email: Optional[str] = Field(None, description='The customer email')
    groups: Optional[List[str]] = Field(
        None, description='Customer groups to add customer to it.'
    )


class Conditions1(BaseModel):
    """
    The conditions that apply in case you want to use auto assign customers to group.
    """

    type: Optional[str] = Field(None, description='Condition type')
    symbol: Optional[str] = Field(None, description='Condition operator')
    value: Optional[float] = Field(
        None, description='Condition value ( value to be after the operator) '
    )


class CategoryRequest(BaseModel):
    name: str = Field(..., description='Category name')
    parent_id: Optional[int] = Field(None, description='Category parent ID')
    sort_order: Optional[float] = Field(
        None, description='The order that you want to give the category'
    )


class CountriesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Country]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CountryResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Response status code')
    data: Optional[Country]


class Receiver(BaseModel):
    """
    `requiredIf` customer_id is null The receiver details of the order
    """

    name: str = Field(..., description='The full name of the receiver.')
    country_code: str = Field(
        ...,
        description='`requiredIf` receiver.name is not null The country code of the receiver.',
    )
    phone: str = Field(
        ...,
        description='`requiredIf` receiver.name is not null The phone of the receiver **without** `country_prefix`.',
    )
    country_prefix: str = Field(
        ...,
        description='`requiredIf` receiver.name is not null The phone code country of the receiver.',
    )
    email: str = Field(
        ...,
        description='`requiredIf` receiver.name is not null The email of the receiver.',
    )
    notify: bool = Field(..., description='flag to notify the receiver.')


class ShippingAddress(BaseModel):
    """
    The shipping address details of the order
    """

    branch_id: Optional[int] = Field(
        566146469,
        description='optional The id of the branch if the order required to be pickup from a branch.',
    )
    country_id: int = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The ID of the country.',
    )
    city_id: int = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The ID of the city.',
    )
    block: str = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The shipping block.',
    )
    street_number: str = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The shipping street number.',
    )
    address: str = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The shipping address.',
    )
    postal_code: str = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The postal code.',
    )
    geocode: str = Field(
        ...,
        description='`requiredIf` shipping_address.branch_id is null The Latitude and Longitude of shipping location',
    )


class AcceptedMethod(Enum):
    credit_card = 'credit_card'
    mada = 'mada'
    bank = 'bank'
    cod = 'cod'


class Payment1(BaseModel):
    """
    The payment details of the order.
    """

    status: str = Field(..., description='Payment status ( paid or not )')
    method: Optional[str] = Field(
        None, description='The payment method.`requiredIf` payment.status = paid '
    )
    accepted_methods: Optional[List[AcceptedMethod]] = Field(
        None, description='Payment accepted methods'
    )


class Product1(BaseModel):
    id: Optional[int] = Field(None, description='Product ID')
    quantity: Optional[int] = Field(None, description='Product quantity')
    name: Optional[str] = Field(None, description='Product name')
    price: Optional[float] = Field(None, description='Product price')


class OrderRequest(BaseModel):
    customer_id: float = Field(
        ..., description='`requiredIf` the receiver details is null The id of customer'
    )
    receiver: Receiver = Field(
        ...,
        description='`requiredIf` customer_id is null The receiver details of the order',
    )
    shipping_address: ShippingAddress = Field(
        ..., description='The shipping address details of the order'
    )
    payment: Payment1 = Field(..., description='The payment details of the order.')
    products: List[Product1] = Field(
        ...,
        description="A list of products, that will be shipped. You can add an existing product or a custom product\\nAvailable product attributes\\n'id' integer 'requiredIf' it is an existing product The ID of the product\\n'name' string 'requiredIf' it is a custom product The name of the product.\\n'price' integer 'requiredIf' it is a custom product the price of the product.\\n'quantity' integer 'requiredIf' it is a custom product integer amount of the product.",
        min_items=1,
    )


class OrderTagRequest(BaseModel):
    tag_name: str = Field(..., description='Order tag name')


class OrderTagsResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[OrderTag]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class PaymentsResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Payment]] = Field(None, min_items=1)


class ProductRequest(BaseModel):
    name: str = Field(..., description='The title of the product.')
    price: float = Field(..., description='The price of the product.')
    status: Optional[str] = Field(
        None, description="The product status. available values 'hidden','sale','out'"
    )
    product_type: str = Field(..., description='the product type | kind of the product')
    quantity: Optional[float] = Field(None, description='Quantity of the product.')
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )
    description: Optional[str] = Field(
        None, description='describing the Product details.'
    )
    categories: Optional[List[float]] = Field(
        None,
        description='a list of categories ids, that will be associate with the product.',
    )
    min_amount_donating: Optional[float] = Field(
        None, description='the minimum amount to donate.'
    )
    max_amount_donating: Optional[float] = Field(
        None, description='the maximum amount to donate.'
    )
    sale_price: Optional[float] = Field(
        None, description='the sale price of the product.'
    )
    cost_price: Optional[float] = Field(
        None, description='the cost price of the product.'
    )
    sale_end: Optional[str] = Field(
        None, description='the ended date sale of the product.'
    )
    require_shipping: Optional[bool] = Field(
        None, description='determent if the product require shipping or not.'
    )
    maximum_quantity_per_order: Optional[bool] = Field(
        None, description='the maximum quantity for the product.'
    )
    weight: Optional[float] = Field(
        None, description='if applicable the weight of the product.'
    )
    sku: Optional[str] = Field(None, description='Sku of the product.')
    hide_quantity: Optional[bool] = Field(
        None, description='weather to hide the quantity or not.'
    )
    enable_upload_image: Optional[bool] = Field(
        None,
        description='To enable upload image for the product when the customer add it to cart.',
    )
    enable_note: Optional[bool] = Field(
        None,
        description='To enable add note for the product when customer add it to cart.',
    )
    pinned: Optional[bool] = Field(
        None, description='if you want pinned the product in categories page.'
    )
    active_advance: Optional[bool] = Field(
        None, description='if you want to activate product advanced option.'
    )
    subtitle: Optional[str] = Field(
        None,
        description='Subtitle of the product will display under product name in pages.',
    )
    promotion_title: Optional[str] = Field(
        None, description='A label to display in the main image.'
    )
    metadata_title: Optional[str] = Field(
        None,
        description='The page title for product in case you want different page title of product name.',
    )
    metadata_description: Optional[str] = Field(
        None,
        description='The page description for product will display in search engine results.',
    )
    brand_id: Optional[int] = Field(None, description='The brand id for product.')
    tags: Optional[List[float]] = Field(
        None, description='The tag ids, check tags sections for more details.'
    )


class ProductOptionValueRequest(BaseModel):
    name: str = Field(..., description='Product value name')
    price: Optional[float] = Field(
        None,
        description="The additional price which will added to product price when customer add select his value, or you can set 0 if you don't want add any additional price.",
    )
    display_value: Optional[str] = Field(
        None,
        description="The display value in UI based on display type of option, by default will use the name of value as display value when the 'display_value=text', but in case you used 'image' then you need to set the image id as value You can upload a new image to product using attach image endpoint then use 'image' id from response, otherwise when use 'color' as display type you need to pass the color for example '#000' for black color",
    )


class TaxRequest(BaseModel):
    tax: str = Field(..., description='The Tax rate.')
    country_id: Optional[int] = Field(
        None,
        description='The ID of the country, you can pass null in case you want to set the tax for all Countries.',
    )


class TaxResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Tax]


class TaxesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Tax]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class Header(BaseModel):
    key: str = Field(..., description='`required if` headers.* not empty')
    value: str = Field(..., description='required if` headers.* not empty')


class WebhookRequest(BaseModel):
    name: str = Field(..., description='Webhook name')
    event: str = Field(..., description='Webhook event ( one from events list )')
    url: str = Field(..., description='Webhook URL')
    headers: List[Header] = Field(..., description='Webhook headers', min_items=1)


class WebhooksResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Webhook]] = Field(None, min_items=1)


class Datum(BaseModel):
    id: Optional[int] = Field(None, description='Event ID')
    label: Optional[str] = Field(None, description='Event label')
    event: Optional[str] = Field(
        None, description='Event text to be used to register new webhook'
    )


class EventsResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Datum]] = Field(None, min_items=1)


class Data(BaseModel):
    message: Optional[str] = Field(None, description='Response message')
    code: Optional[float] = Field(None, description='Response code')


class DeleteSuccessResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data]


class Error(BaseModel):
    code: Optional[float] = Field(None, description='Response code')
    message: Optional[str] = Field(None, description='Response message')


class NotFoundResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    error: Optional[Error]


class Fields(BaseModel):
    """
    Validation rules with problems
    """

    _field_name_: Optional[List[str]] = Field(None, alias='{field-name}')


class Error1(BaseModel):
    code: Optional[str] = Field(None, description='Response code')
    message: Optional[str] = Field(None, description='Response message')
    fields: Optional[Fields] = Field(None, description='Validation rules with problems')


class ValidationResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    error: Optional[Error1]


class SubTotal(BaseModel):
    """
    Order sub total
    """

    amount: Optional[float] = Field(None, description='Order sub total amount')
    currency: Optional[str] = Field(None, description='Order sub total currency')


class ShippingCost(BaseModel):
    """
    Order shipping cost
    """

    amount: Optional[float] = Field(None, description='Order shipping cost amount')
    currency: Optional[str] = Field(None, description='Order shipping cost amount')


class CashOnDelivery(BaseModel):
    """
    Order cash on delivery cost
    """

    amount: Optional[float] = Field(
        None, description='Order cash on delivery cost amount'
    )
    currency: Optional[str] = Field(
        None, description='Order cash on delivery cost curreny'
    )


class Amount(BaseModel):
    """
    Order tax amount det
    """

    amount: Optional[float] = Field(None, description='Order tax amount')
    currency: Optional[str] = Field(None, description='Order tax amount currency')


class Tax1(BaseModel):
    """
    Order applied tax value
    """

    percent: Optional[str] = Field(None, description='Tax percent')
    amount: Optional[Amount] = Field(None, description='Order tax amount det')


class Discount(BaseModel):
    """
    Product discounts details
    """

    title: Optional[str] = Field(None, description='Order discounts title')
    type: Optional[str] = Field(None, description='Order discounts type')
    code: Optional[str] = Field(None, description='Order discounts code')
    discount: Optional[str] = Field(None, description='Order discount ')
    discounted_shipping: Optional[float] = Field(
        None, description='Order discount shipping'
    )


class Total(BaseModel):
    """
    Order total cost
    """

    amount: Optional[float] = Field(None, description='Order total cost amount.')
    currency: Optional[str] = Field(None, description='Order total cost currency')


class Amounts(BaseModel):
    """
    Order amounts deta
    """

    sub_total: Optional[SubTotal] = Field(None, description='Order sub total')
    shipping_cost: Optional[ShippingCost] = Field(
        None, description='Order shipping cost'
    )
    cash_on_delivery: Optional[CashOnDelivery] = Field(
        None, description='Order cash on delivery cost'
    )
    tax: Optional[Tax1] = Field(None, description='Order applied tax value')
    discounts: Optional[List[Discount]] = Field(
        None, description='Order discounts', min_items=1
    )
    total: Optional[Total] = Field(None, description='Order total cost')


class Receiver1(BaseModel):
    """
    Order receiver details
    """

    name: Optional[str] = Field(None, description='Order receiver name')
    email: Optional[str] = Field(None, description='Order receiver details')
    phone: Optional[str] = Field(None, description='Order receiver p')


class Shipper(BaseModel):
    """
    Order shipper details
    """

    name: Optional[str] = Field(None, description='Order shipper name')
    company_name: Optional[str] = Field(None, description='Order shipper company name')
    email: Optional[str] = Field(None, description='Order shipper email')
    phone: Optional[str] = Field(None, description='Order shipper phone')


class GeoCoordinates(BaseModel):
    """
    Order pickup address location on map ( lat , lng)
    """

    lat: Optional[float] = Field(None, description='Latitude ')
    lng: Optional[float] = Field(None, description='Longitude')


class PickupAddress(BaseModel):
    """
    Order pickup address details
    """

    country: Optional[str] = Field(None, description='Order pickup address country')
    city: Optional[str] = Field(None, description='Order pickup address city')
    shipping_address: Optional[str] = Field(
        None, description='Order pickup address shipping address'
    )
    street_number: Optional[Any] = Field(
        None, description='Order pickup address street number'
    )
    block: Optional[Any] = Field(None, description='Order pickup address block')
    postal_code: Optional[Any] = Field(
        None, description='Order pickup address postal code'
    )
    geo_coordinates: Optional[GeoCoordinates] = Field(
        None, description='Order pickup address location on map ( lat , lng)'
    )


class Address(BaseModel):
    """
    Order address details
    """

    country: Optional[str] = Field(None, description='Order shipping address country')
    city: Optional[str] = Field(None, description='Order shipping address city')
    shipping_address: Optional[str] = Field(None, description='Order shipping address')
    street_number: Optional[str] = Field(
        None, description='Order shipping address street number'
    )
    block: Optional[str] = Field(None, description='Order shipping address block')
    postal_code: Optional[str] = Field(
        None, description='Order shipping address postalcode'
    )


class Shipment(BaseModel):
    """
    Order shipment details
    """

    id: Optional[int] = Field(None, description='Order shipment ID')
    pickup_id: Optional[int] = Field(None, description='Order shipment pickup ID')


class Shipping(BaseModel):
    """
    Order shipping details
    """

    id: Optional[int] = Field(None, description='Order shipping ID')
    company: Optional[str] = Field(None, description='Order shipping company')
    receiver: Optional[Receiver1] = Field(None, description='Order receiver details')
    shipper: Optional[Shipper] = Field(None, description='Order shipper details')
    pickup_address: Optional[PickupAddress] = Field(
        None, description='Order pickup address details'
    )
    address: Optional[Address] = Field(None, description='Order address details')
    shipment: Optional[Shipment] = Field(None, description='Order shipment details')


class Bank(BaseModel):
    """
    Bank details, if payment method is BankTransfer
    """

    id: Optional[int] = Field(None, description='Bank I')
    bank_name: Optional[str] = Field(None, description='Bank name')
    account_name: Optional[str] = Field(None, description='Bank account ')
    account_number: Optional[str] = Field(None, description='Bank account number')
    iban_number: Optional[str] = Field(None, description='Bank account iban number')
    status: Optional[str] = Field(None, description='Bank status')


class PriceWithoutTax(BaseModel):
    """
    Order item amounts price without tax
    """

    amount: Optional[float] = Field(
        None, description='Order item amounts price without tax '
    )
    currency: Optional[str] = Field(
        None, description='Order item amounts price without tax currency'
    )


class TotalDiscount(BaseModel):
    """
    Order item amounts total discount
    """

    amount: Optional[float] = Field(
        None, description='Order item amounts total discount amount'
    )
    currency: Optional[str] = Field(
        None, description='Order item amounts total discount currency'
    )


class Amount1(BaseModel):
    """
    Order item amounts tax amount
    """

    amount: Optional[float] = Field(None, description='Order item amounts tax amount')
    currency: Optional[str] = Field(
        None, description='Order item amounts tax caurrency'
    )


class Tax2(BaseModel):
    """
    Order item amounts tax
    """

    percent: Optional[str] = Field(None, description='Order item amounts tax percent')
    amount: Optional[Amount1] = Field(None, description='Order item amounts tax amount')


class Total1(BaseModel):
    """
    Order item amounts total
    """

    amount: Optional[float] = Field(None, description='Order item amounts total amount')
    currency: Optional[str] = Field(
        None, description='Order item amounts total currency'
    )


class Amounts1(BaseModel):
    """
    Order item amounts details
    """

    price_without_tax: Optional[PriceWithoutTax] = Field(
        None, description='Order item amounts price without tax'
    )
    total_discount: Optional[TotalDiscount] = Field(
        None, description='Order item amounts total discount'
    )
    tax: Optional[Tax2] = Field(None, description='Order item amounts tax')
    total: Optional[Total1] = Field(None, description='Order item amounts total')


class Value(BaseModel):
    """
    Product option value details
    """

    type: Optional[str] = Field(None, description='Product option value type')
    value: Optional[str] = Field(None, description='Product option value value')


class Option(BaseModel):
    """
    Product option details
    """

    id: Optional[int] = Field(None, description='Product option ID')
    name: Optional[str] = Field(None, description='Product option name')
    value: Optional[Value] = Field(None, description='Product option value details')


class Image1(BaseModel):
    id: Optional[int] = Field(None, description='Product image ID')
    image: Optional[str] = Field(None, description='Product image image')
    type: Optional[str] = Field(None, description='Product image type')


class Status2(Enum):
    """
    Product Codes status
    """

    active = 'active'
    inactive = 'inactive'
    pending = 'pending'
    sold = 'sold'


class Code(BaseModel):
    """
    Product Codes details
    """

    code: Optional[str] = Field(None, description='Product Codes code')
    status: Optional[Status2] = Field(None, description='Product Codes status')


class File(BaseModel):
    url: Optional[str] = Field(None, description='Pro')
    name: Optional[str] = Field(None, description='Product file name')
    size: Optional[float] = Field(None, description='Product file size')


class WebhookResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Webhook]


class CustomerBanRequest(BaseModel):
    reason: str = Field(..., description='Reason to ban the customer')


class Data1(Data):
    pass


class CustomerGroupDefaultResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data1]


class Customer1(BaseModel):
    """
    Customer Details
    """

    id: Optional[int] = Field(None, description='Customer ID')
    avatar: Optional[str] = Field(
        None, description='Customer avatar ( personal picture )'
    )
    name: Optional[str] = Field(
        None, description='Customer name ( first name + last name)'
    )
    mobile: Optional[str] = Field(
        None, description='Customer mobile (mobile code + mobile number)'
    )


class Datum1(BaseModel):
    id: Optional[int] = Field(None, description='Cart ID')
    subtotal: Optional[str] = Field(None, description='Cart sub total')
    currency: Optional[str] = Field(None, description='Cart Currency')
    total: Optional[str] = Field(None, description='Cart total')
    coupon_code: Optional[str] = Field(None, description='Promotion coupon code')
    customer: Optional[Customer1] = Field(None, description='Customer Details')


class AbandonedCartsResponse(BaseModel):
    status: Optional[int] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Datum1]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class OrderStatusRequest(BaseModel):
    status_id: float = Field(..., description='Order status id')
    note: Optional[str] = Field(None, description='Order status change note')


class Data2(BaseModel):
    message: Optional[str] = Field(None, description='Response message')
    code: Optional[float] = Field(None, description='Response co')


class OrderStatusResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data2]


class OrderTagResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[OrderTag]


class ProductDigitalCodesRequest(BaseModel):
    codes: List[str] = Field(..., description='Prodcut codes')


class Error2(Error):
    pass


class ProductDigitalCodesResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Response status code')
    error: Optional[Error2]


class ProductPriceRequest(BaseModel):
    price: float = Field(..., description='The new price')


class ProductVideoRequest(BaseModel):
    youtube: str = Field(..., description='video url | required')
    default: Optional[bool] = Field(
        None, description='Set the video thumbnail image as default for product.'
    )
    alt: Optional[str] = Field(
        None, description='description for the video thumbnail image to enhance seo'
    )


class Original(BaseModel):
    """
    Product video image original details
    """

    url: Optional[str] = Field(None, description='Product video image original url\n\n')
    width: Optional[float] = Field(
        None, description='Product video image original width\n\n'
    )
    height: Optional[float] = Field(
        None, description='Product video image original height\n\n'
    )


class StandardResolution(BaseModel):
    """
    Product video image standard resolution details
    """

    width: Optional[float]
    height: Optional[float]
    url: Optional[str] = Field(
        None, description='Product video image standard resolution url'
    )


class LowResolution(BaseModel):
    """
    Product video image low resolution details
    """

    url: Optional[str] = Field(
        None, description='Product video image low resolution url\n\n'
    )
    width: Optional[float] = Field(
        None, description='Product video image low resolution width'
    )
    height: Optional[float] = Field(
        None, description='Product video image low resolution height\n\n'
    )


class Thumbnail(BaseModel):
    """
    Product video image thumbnail details
    """

    url: Optional[str] = Field(
        None, description='Product video image thumbnail url\n\n'
    )
    width: Optional[float] = Field(
        None, description='Product video image thumbnail width\n\n'
    )
    height: Optional[float] = Field(
        None, description='Product video image thumbnail height\n\n'
    )


class Image2(BaseModel):
    """
    Product video image details
    """

    original: Optional[Original] = Field(
        None, description='Product video image original details'
    )
    standard_resolution: Optional[StandardResolution] = Field(
        None, description='Product video image standard resolution details'
    )
    low_resolution: Optional[LowResolution] = Field(
        None, description='Product video image low resolution details'
    )
    thumbnail: Optional[Thumbnail] = Field(
        None, description='Product video image thumbnail details'
    )


class Data3(BaseModel):
    id: Optional[int] = Field(None, description='Product video image ID\n\n')
    image: Optional[Image2] = Field(None, description='Product video image details')
    default: Optional[bool] = Field(
        None, description='Is this video image the default product image or not'
    )
    alt_seo: Optional[str] = Field(
        None, description='Product video image alternative seo description\n\n'
    )
    video_url: Optional[str] = Field(None, description='Product video url')
    type: Optional[str] = Field(None, description='Product video type ( video )')


class ProductVideoResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data3]


class ProductStatusRequest(BaseModel):
    status: str = Field(..., description='The new status.')


class Data4(Data):
    pass


class ProductStatusResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data4]


class ProductImageRequest(BaseModel):
    photo: str = Field(..., description='required, file | The image file.')
    default: Optional[bool] = Field(
        None, description='Set the image as default for product.\n\n'
    )
    sort: Optional[float] = Field(None, description='optional The image sort order.')
    alt: Optional[str] = Field(
        None, description='description for the image to enhance seo'
    )


class Original1(BaseModel):
    """
    Product image original details
    """

    url: Optional[str] = Field(None, description='Product image original url')
    width: Optional[float] = Field(None, description='Product image original width')
    height: Optional[float] = Field(None, description='Product image original height')


class StandardResolution1(BaseModel):
    """
    Product image standard resolution details
    """

    url: Optional[str] = Field(
        None, description='Product image standard resolution url'
    )
    width: Optional[float] = Field(
        None, description='Product image standard resolution width'
    )
    height: Optional[float] = Field(
        None, description='Product image standard resolution height'
    )


class LowResolution1(BaseModel):
    """
    Product image low resolution details
    """

    url: Optional[str] = Field(None, description='Product image low resolution url')
    width: Optional[float] = Field(
        None, description='Product image low resolution width'
    )
    height: Optional[float] = Field(
        None, description='Product image low resolution height'
    )


class Thumbnail1(BaseModel):
    """
    Product image thumbnail details
    """

    url: Optional[str] = Field(None, description='Product image thumbnail url')
    width: Optional[float] = Field(None, description='Product image thumbnail width')
    height: Optional[float] = Field(None, description='Product image thumbnail height')


class Image3(BaseModel):
    """
    Product image details
    """

    original: Optional[Original1] = Field(
        None, description='Product image original details'
    )
    standard_resolution: Optional[StandardResolution1] = Field(
        None, description='Product image standard resolution details'
    )
    low_resolution: Optional[LowResolution1] = Field(
        None, description='Product image low resolution details'
    )
    thumbnail: Optional[Thumbnail1] = Field(
        None, description='Product image thumbnail details'
    )


class Data5(BaseModel):
    id: Optional[int] = Field(None, description='Product image ID')
    image: Optional[Image3] = Field(None, description='Product image details')
    sort: Optional[float] = Field(None, description='Product image sort number')
    default: Optional[bool] = Field(
        None, description='Is this image the default product image or not'
    )
    alt_seo: Optional[str] = Field(
        None, description='Product image alternative seo description'
    )
    video_url: Optional[str]
    type: Optional[str] = Field(None, description='Product image type ( image )')


class ProductImageResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data5]


class ProductDigitalFileRequest(BaseModel):
    file: str = Field(..., description='The actual file to upload.')
    file_name: str = Field(
        ..., description='The name of the file which will display to customers.'
    )


class Data6(BaseModel):
    name: Optional[str] = Field(None, description='Product digital file name')
    url: Optional[str] = Field(None, description='Product digital file url')
    size: Optional[float] = Field(None, description='Product digital file size')


class ProductDigitalFileResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data6]


class ProductQuantityRequest(BaseModel):
    quantity: float = Field(
        ..., description='New product quantity `required if` unlimited_quantity = false'
    )
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )


class Data7(Data):
    pass


class ProductQuantityResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data7]


class SpecialOfferStatusRequest(BaseModel):
    status: str = Field(..., description='The offer status.')


class Data8(Error):
    pass


class SpecialOfferStatusResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Data8]


class Sku1(BaseModel):
    sku: Optional[str]
    quantity: Optional[float] = Field(
        None, description='New quantity `required if` unlimited_quantity = false'
    )
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )


class ProductsQuantityRequest(BaseModel):
    skus: List[Sku1]


class Error3(Error):
    pass


class ProductsQuantityResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Responses status code')
    error: Optional[Error3]


class CustomerUpdateRequest(BaseModel):
    first_name: str = Field(..., description='The customer first name')
    last_name: str = Field(..., description='The customer last name\n\n')
    mobile: Optional[str] = Field(
        None, description='The mobile of the customer without country code'
    )
    mobile_code_country: Optional[str] = Field(
        None, description='mobile country code\n\n'
    )
    email: Optional[str] = Field(None, description='The customer email\n\n')
    groups: Optional[List[str]] = Field(
        None, description='Customer groups to add customer to it.\n\n'
    )


class Total2(Total):
    """
    Order total cost
    """

    pass


class Item1(BaseModel):
    name: Optional[str] = Field(None, description='Item name')
    quantity: Optional[float] = Field(None, description='Item Quantity')


class CountryCard(BaseModel):
    id: Optional[int] = Field(None, description='Country ID')
    name: Optional[str] = Field(None, description='Country name')
    code: Optional[str] = Field(None, description='Country iso code')


class CustomerGroupFeatures(BaseModel):
    """
    The features will be available for customers they belong to this group. by default all features will be available.
    """

    payment_method: Optional[List[str]] = Field(
        None, description='payment options available to the group\n\n'
    )
    shipping: Optional[List[str]] = Field(
        None, description='shipping methods available to the group\n\n'
    )


class CustomerGroupCard(BaseModel):
    id: Optional[int] = Field(None, description='Customer group ID\n\n')
    name: Optional[str] = Field(None, description='Name of the Group\n\n')


class Data9(Data):
    pass


class CustomerBlacklistResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code\n')
    success: Optional[bool] = Field(None, description='Response success flag')
    data: Optional[Data9]


class Date(BaseModel):
    date: Optional[datetime] = Field(None, description='"2020-10-14 14:28:03.000000"')
    timezone_type: Optional[float] = Field(
        None, description='TimeZone type, for Middel East = 3 '
    )
    timezone: Optional[str] = Field(None, description='"Asia/Riyadh"')


class Promotion1(Promotion):
    """
    Product promotion details
    """

    pass


class Price3(Price1):
    """
    Product price details
    """

    pass


class SalePrice1(BaseModel):
    """
    Product sale price details
    """

    amount: Optional[float] = Field(None, description='Product sale price amount')
    currency: Optional[str] = Field(None, description='Product sale price curren')


class RegularPrice2(RegularPrice):
    """
    Product regular price details
    """

    pass


class ProductCard(BaseModel):
    """
    Detailed structure of the Product short payload model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Product ID')
    promotion: Optional[Promotion1] = Field(
        None, description='Product promotion details'
    )
    sku: Optional[str] = Field(None, description='Product sku')
    type: Optional[str] = Field(None, description='Product type')
    name: Optional[str] = Field(None, description='Product name')
    price: Optional[Price3] = Field(None, description='Product price details')
    status: Optional[str] = Field(
        None, description="The product status. available values 'hidden','sale','out'"
    )
    is_available: Optional[bool] = Field(
        None, description='Is product available or not'
    )
    sale_price: Optional[SalePrice1] = Field(
        None, description='Product sale price details'
    )
    url: Optional[str] = Field(None, description='Product url ')
    has_special_price: Optional[bool] = Field(
        None, description='Is this product has a special price'
    )
    regular_price: Optional[RegularPrice2] = Field(
        None, description='Product regular price details'
    )
    currency: Optional[str] = Field(None, description='Product currency')
    thumbnail: Optional[str] = Field(None, description='Product thum')


class OrderStatusCard(BaseModel):
    """
    Order status
    """

    id: Optional[int] = Field(None, description='Order status ID')
    name: Optional[str] = Field(None, description='Order status name')


class Price4(BaseModel):
    """
    The price of the product variant.
    """

    amount: Optional[float] = Field(None, description='Example: 96.33', example=96.33)
    currency: Optional[str]


class SalePrice2(BaseModel):
    """
    The sale price of the product variant.
    """

    amount: Optional[float] = Field(None, description='Example: 100.33')
    currency: Optional[str]


class RegularPrice3(SalePrice2):
    """
    The regular price of the product variant.
    """

    pass


class ProductVariant(BaseModel):
    """
    Detailed structure of the product variant model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Variant ID')
    price: Optional[Price4] = Field(
        None, description='The price of the product variant.'
    )
    sale_price: Optional[SalePrice2] = Field(
        None, description='The sale price of the product variant.'
    )
    regular_price: Optional[RegularPrice3] = Field(
        None, description='The regular price of the product variant.'
    )
    stock_quantity: Optional[int] = Field(
        None,
        description='amount of the product variant total stock quantity. Only updated if the store feature manage product by branches is not activated.',
        example=4,
    )
    barcode: Optional[str] = Field(
        None, description='The barcode value of product variant.', example='abc01'
    )
    sku: Optional[str] = Field(
        None, description='The sku value of product variant.', example='23-TD23-32'
    )
    related_options: Optional[List[int]] = Field(
        None,
        description='Variant related options are the option values that this variant combined of.',
    )


class ProductVariantsResponse(BaseModel):
    status: Optional[float]
    success: Optional[bool]
    data: Optional[List[ProductVariant]]
    pagination: Optional[Pagination]


class ProductVariantResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[ProductVariant]


class ProductVariantRequest(BaseModel):
    sku: Optional[str] = Field(
        None,
        description='The sku value of product variant. Example: 23-TD23-32',
        example='23-TD23-32',
    )
    barcode: Optional[str] = Field(
        None,
        description='The barcode value of product variant. Example: abc01',
        example='abc01',
    )
    price: Optional[float] = Field(
        None,
        description='The price of the product variant. Example: 96.33',
        example=96.33,
    )
    sale_price: Optional[float] = Field(
        None,
        description='The sale price of the product variant. Example: 90.50',
        example=90.5,
    )
    regular_price: Optional[float] = Field(
        None,
        description='The regular price of the product variant. Example: 100.33',
        example=100.33,
    )
    stock_quantity: Optional[float] = Field(
        None,
        description='amount of the product variant total stock quantity. Only updated if the store feature manage product by branches is not activated. Example: 4',
        example=4,
    )


class ProductVariantQuantityRequest(BaseModel):
    quantity: int = Field(..., description='The new amount of quantities you want set.')


class ProductUpdateRequest(BaseModel):
    name: str = Field(..., description='The title of the product.')
    price: float = Field(..., description='The price of the product.')
    status: Optional[str] = Field(
        None, description="The product status. available values 'hidden','sale','out'"
    )
    quantity: Optional[float] = Field(
        None,
        description='Quantity of the product. will be skippped if unlimted_quantity=true',
    )
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )
    description: Optional[str] = Field(
        None, description='describing the Product details.'
    )
    categories: Optional[List[float]] = Field(
        None,
        description='a list of categories ids, that will be associate with the product.',
    )
    min_amount_donating: Optional[float] = Field(
        None, description='the minimum amount to donate.'
    )
    max_amount_donating: Optional[float] = Field(
        None, description='the maximum amount to donate.'
    )
    sale_price: Optional[float] = Field(
        None, description='the sale price of the product.'
    )
    cost_price: Optional[float] = Field(
        None, description='the cost price of the product.'
    )
    sale_end: Optional[str] = Field(
        None, description='the ended date sale of the product.'
    )
    require_shipping: Optional[bool] = Field(
        None, description='determent if the product require shipping or not.'
    )
    maximum_quantity_per_order: Optional[bool] = Field(
        None, description='the maximum quantity for the product.'
    )
    weight: Optional[float] = Field(
        None, description='if applicable the weight of the product.'
    )
    sku: Optional[str] = Field(None, description='Sku of the product.')
    hide_quantity: Optional[bool] = Field(
        None, description='weather to hide the quantity or not.'
    )
    enable_upload_image: Optional[bool] = Field(
        None,
        description='To enable upload image for the product when the customer add it to cart.',
    )
    enable_note: Optional[bool] = Field(
        None,
        description='To enable add note for the product when customer add it to cart.',
    )
    pinned: Optional[bool] = Field(
        None, description='if you want pinned the product in categories page.'
    )
    active_advance: Optional[bool] = Field(
        None, description='if you want to activate product advanced option.'
    )
    subtitle: Optional[str] = Field(
        None,
        description='Subtitle of the product will display under product name in pages.',
    )
    promotion_title: Optional[str] = Field(
        None, description='A label to display in the main image.'
    )
    metadata_title: Optional[str] = Field(
        None,
        description='The page title for product in case you want different page title of product name.',
    )
    metadata_description: Optional[str] = Field(
        None,
        description='The page description for product will display in search engine results.',
    )
    brand_id: Optional[int] = Field(None, description='The brand id for product.')
    tags: Optional[List[float]] = Field(
        None, description='The tag ids, check tags sections for more details.'
    )


class Skus(BaseModel):
    _productSku_: Optional[float] = Field(
        None,
        alias='{productSku}',
        description="add the product sku instead of {productSku} and the value should be the new quantity. Example '22-TBS-64' : 55",
    )


class ProductsQuantityUpdateRequest(BaseModel):
    skus: Optional[Skus]


class URLs(BaseModel):
    """
    To help companies and merchants, Salla provides a “urls” attribute that has been added to different modules to guide the merchants to have the full URL of this module from both scopes, the dashboard scope as a store admin, and as a customer.
    """

    customer: Optional[str] = Field(
        None, example='https://storename.com/modulename/KvVlD'
    )
    admin: Optional[str] = Field(None, example='https://s.salla.sa/module')


class Customer(BaseModel):
    """
    Detailed structure of the customer model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description="Customer's ID")
    first_name: Optional[str] = Field(None, description="Customer's first name")
    last_name: Optional[str] = Field(None, description="Customer's last name")
    mobile: Optional[float] = Field(
        None, description="Customer's mobile number, without country code"
    )
    mobile_code: Optional[str] = Field(
        None, description="Customer's country mobile code"
    )
    email: Optional[str] = Field(None, description="Customer's email")
    urls: Optional[URLs]
    avatar: Optional[str] = Field(None, description="Customer's avatar (personal pic)")
    gender: Optional[str] = Field(None, description="Customer's gender")
    city: Optional[str] = Field(None, description="Customer's city")
    country: Optional[str] = Field(None, description="Customer's country")
    currency: Optional[str] = Field(None, description="Customer's currency")
    location: Optional[str] = Field(None, description="Customer's Location")
    updated_at: Optional[Date]


class CustomerGroup(BaseModel):
    """
    Detailed structure of the customer group model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Customer group ID')
    name: Optional[str] = Field(None, description='Name of the Group')
    conditions: Optional[Conditions] = Field(
        None,
        description="conditions that must apply to be member of the group\nExpample: 'total_sales > 100', meaning if the customer have sales more than 100, then he may enter this group\n\nthese conditions in case you want to use auto assign customers to group.",
    )
    features: Optional[CustomerGroupFeatures]


class ProductValue(BaseModel):
    """
    Detailed structure of the product value model object showing its fields and data types.
    """

    # id: Optional[float] = Field(None, description='Product value ID')
    # Custom code
    id: Optional[int] = Field(None, description='Product value ID')
    name: Optional[str] = Field(None, description='Product value name')
    price: Optional[Price] = Field(
        None,
        description="The additional price which will added to product price when customer add select his value, or you can set 0 if you don't want add any additional price. for product.type service and food only",
    )
    display_value: Optional[str] = Field(
        None,
        description="The display value in UI based on display type of option, by default will use the name of value as display value when the 'display_value=text', but in case you used 'image' then you need to set the image id as value You can upload a new image to product using attach image endpoint then use 'image' id from response, otherwise when use 'color' as display type you need to pass the color for example '#000' for black color",
    )
    option_id: Optional[str] = Field(None, description='Option id')
    image_url: Optional[str] = Field(
        None, description='Value image url if option.type = image'
    )
    hashed_display_value: Optional[str] = Field(
        None,
        description='if option.type = image then hashed display value return image id. \nif option.type = text then hashed display value return value name ',
    )
    skus: Optional[List[ProductVariant]]


class Category(BaseModel):
    # id: Optional[float] = Field(None, description='Category ID')
    # Custom code
    id: Optional[int] = Field(None, description='Category ID')
    name: Optional[str] = Field(None, description='Category name')
    urls: Optional[URLs]
    parent_id: Optional[int] = Field(None, description='Category Parent ID')
    items: Optional[List[Category]] = Field(
        None, description='Category items ( list of sub categories for this category)'
    )
    status: Optional[Status] = Field(
        None, description='Category status ( active , hidden )'
    )
    sort_order: Optional[Optional[int]] = Field(
        None, description='Category sort ID - used to set category order'
    )


class Buy(BaseModel):
    """
    Details of what to buy to get the offer
    """

    type: Optional[str] = Field(
        None,
        description='required-if `offer_type = buy_x_get_y`\n\nValues `product`,`category`',
    )
    quantity: Optional[float] = Field(
        None, description='required-if `offer_type = buy_x_get_y`'
    )
    products: Optional[List[ProductCard]] = Field(
        None, description='required-if `buy.type = product`\n\nProducts IDs as array'
    )


class Get(BaseModel):
    """
    Details of the offer
    """

    type: Optional[str] = Field(None, description='')
    discount_type: Optional[str] = Field(
        None,
        description='if `offer_type = buy_x_get_y`\n\nValues: `percentage`, `free-product`',
    )
    quantity: Optional[int] = Field(None, description='if offer_type =buy_x_get_y')
    products: Optional[List[ProductCard]] = Field(
        None,
        description='required-if `buy.type = product`\n\nProducts IDs as array',
        min_items=1,
    )


class SpecialOffer(BaseModel):
    """
    Detailed structure of the special offer model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Special offer ID')
    name: Optional[str] = Field(None, description='Special offer name')
    message: Optional[str] = Field(None, description='Special offer message')
    expiry_date: Optional[str] = Field(None, description='Special offer end date')
    offer_type: Optional[str] = Field(None, description='Special offer type')
    status: Optional[str] = Field(None, description='Special offer status')
    applied_to: Optional[str]
    buy: Optional[Buy] = Field(
        None, description='Details of what to buy to get the offer'
    )
    get: Optional[Get] = Field(None, description='Details of the offer ')


class Branch(BaseModel):
    """
    Detailed structure of the branch model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Branch ID')
    name: Optional[str] = Field(None, description='Branch name')
    status: Optional[str] = Field(
        None, description='Branch status ( active , inactive )'
    )
    location: Optional[Location] = Field(
        None, description='Branch location on map ( longitude, latitude )'
    )
    contacts: Optional[Contacts] = Field(None, description='Branch contacts')
    preparation_time: Optional[str] = Field(
        None, description='Needed time to get an order ready for shipping or pickup'
    )
    is_open: Optional[bool] = Field(
        None, description='Is Branch currently open or closed'
    )
    closest_time: Optional[ClosestTime] = Field(
        None,
        description='The time when the branch will be closed based on the request time. Each request may have a different value. ',
    )
    working_hours: Optional[WorkingHours] = Field(
        None,
        description='Branch working hours - `required if` branch.type is \\"branch\\"',
    )
    is_cod_available: Optional[bool] = Field(
        None, description='Cash on delivery availability status'
    )
    is_default: Optional[bool] = Field(
        None, description='Is this branch the default branch for all operations or not.'
    )
    type: Optional[Type] = Field(None, description='Branch type (branch - warehouse)')
    cod_cost: Optional[str] = Field(None, description='Cash on delivery cost value\n\n')
    country: Optional[Country]
    city: Optional[City]


class ProductOption(BaseModel):
    """
    Detailed structure of the product option model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Product option ID')
    name: Optional[str] = Field(None, description='Product option name')
    description: Optional[Optional[str]] = Field(
        None, description='Product option description'
    )
    type: Optional[str] = Field(None, description='Product option type')
    required: Optional[bool] = Field(
        None, description='Client should choose option or not'
    )
    associated_with_order_time: Optional[Union[int, bool]] = Field(
        None,
        description='is option related with order recieving time. for date time options only',
    )
    sort: Optional[Optional[int]] = Field(None, description='Product option so')
    display_type: Optional[str] = Field(
        None, description='Product option display type ( text - image - color)'
    )
    visibility: Optional[Visibility] = Field(
        None,
        description='Product option visiblity based on a condition. used only for products with type "food", "service".',
    )
    visibility_condition_type: Optional[VisibilityConditionType] = Field(
        None, description='Product option visiblity condition type ( < , > , = , !=)'
    )
    visibility_condition_option: Optional[Optional[int]] = Field(
        None, description='Product option ID for visiblity condition'
    )
    visibility_condition_value: Optional[Optional[int]] = Field(
        None, description='Product option value ID for visiblity condition'
    )
    values: Optional[List[ProductValue]] = Field(None, min_items=1)
    skus: Optional[List[ProductVariant]]


class SpecialOfferResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[SpecialOffer]


class BranchResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Branch]


class BranchesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Branch]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CustomerResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Customer]


class CustomersResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Customer]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CustomerGroupRequest(BaseModel):
    name: str = Field(..., description='The group name, should be unique.')
    conditions: Optional[Conditions1] = Field(
        None,
        description='The conditions that apply in case you want to use auto assign customers to group.',
    )
    features: Optional[CustomerGroupFeatures]


class CustomerGroupResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[CustomerGroupCard]


class CustomerGroupsResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[CustomerGroupCard]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CategoryResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Category]


class CategoriesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[Category]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CitiesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[City]] = Field(None, min_items=1)
    country: Optional[CountryCard]
    pagination: Optional[Pagination]


class ProductOptionRequest(BaseModel):
    name: str
    display_type: Optional[str] = Field(
        None, description='Product option display type ( text - image - color)'
    )
    values: Optional[List[ProductOptionValueRequest]] = Field(None, min_items=1)


class ProductOptionResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[ProductOption]


class ProductOptionValueResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[ProductValue]


class Item(BaseModel):
    id: Optional[int] = Field(None, description='Order item ID')
    name: Optional[str] = Field(None, description='Order item name')
    sku: Optional[str] = Field(None, description='Order item sku')
    quantity: Optional[float] = Field(None, description='Order item quantity')
    currency: Optional[str] = Field(None, description='Order item currency')
    weight: Optional[float] = Field(None, description='Order item weight')
    amounts: Optional[Amounts1] = Field(None, description='Order item amounts details')
    notes: Optional[str] = Field(None, description='Order items notes')
    product: Optional[ProductCard]
    options: Optional[List[Option]]
    images: Optional[List[Image1]] = Field(None, description='Product images')
    codes: Optional[List[Code]] = Field(None, description='Product Codes')
    files: Optional[List[File]] = Field(None, description='Product files')


class Order(BaseModel):
    """
    Detailed structure of the Order model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Order ID')
    reference_id: Optional[int] = Field(
        None, description='Order refrence ID, that appears to customers in the store.'
    )
    urls: Optional[URLs]
    date: Optional[Date]
    payment_method: Optional[str] = Field(None, description='Order payment method')
    currency: Optional[str] = Field(None, description='Order currency')
    amounts: Optional[Amounts] = Field(None, description='Order amounts deta')
    shipping: Optional[Shipping] = Field(None, description='Order shipping details')
    can_cancel: Optional[bool] = Field(
        None, description='can the client cancel the order or not'
    )
    customer: Optional[Customer]
    status: Optional[OrderStatusCard]
    bank: Optional[Bank] = Field(
        None, description='Bank details, if payment method is BankTransfer'
    )
    items: Optional[List[Item]] = Field(
        None, description='Order items (products)', min_items=1
    )
    tags: Optional[List[OrderTag]]
    pickup_branch: Optional[Branch]


class SpecialOffersResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[SpecialOffer]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class CustomerGroupDefaultRequest(BaseModel):
    features: Optional[CustomerGroupFeatures]


class Datum2(BaseModel):
    id: Optional[int] = Field(None, description='Order history object ')
    status: Optional[str] = Field(None, description='Order history object status')
    note: Optional[str] = Field(None, description='Order history object note')
    created_at: Optional[Date]


class OrderHistoriesResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Response status code')
    data: Optional[List[Datum2]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class OrderStatusesResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[OrderStatusCard]] = Field(None, min_items=1)


class OrderCard(BaseModel):
    """
    Detailed structure of the order short payload model object showing its fields and data types.
    """

    id: Optional[int] = Field(None, description='Order ID')
    reference_id: Optional[int] = Field(
        None, description='Order refrence ID, that appears to customers in the store.'
    )
    total: Optional[Total2] = Field(None, description='Order total cost')
    date: Optional[Date]
    can_cancel: Optional[bool] = Field(
        None, description='can the customer cancel the order or not'
    )
    status: Optional[OrderStatusCard]
    items: Optional[List[Item1]] = Field(
        None, description='Order items (products)', min_items=1
    )


class ProductDetails(BaseModel):
    """
    Detailed structure of the Product model object showing its fields and data types.
    """

    # id: Optional[float] = Field(None, description='Product id')
    # Custom code
    id: Optional[int] = Field(None, description='Product id')
    promotion: Optional[Promotion] = Field(
        None,
        description='A label to display in the main image. Product promotion details',
    )
    sku: Optional[str] = Field(None, description='Product sku')
    type: Optional[Type1] = Field(None, description='Product type')
    name: Optional[str] = Field(None, description='Product name')
    short_link_code: Optional[str] = Field(None, description='Product short link code')
    urls: Optional[URLs]
    price: Optional[Price1] = Field(None, description='Product price details')
    description: Optional[str] = Field(None, description='Product description')
    quantity: Optional[int] = Field(None, description='Product quantity')
    unlimited_quantity: Optional[bool] = Field(
        None, description='Show if this product has unlimited quantity or not'
    )
    status: Optional[Status1] = Field(None, description='Product status')
    is_available: Optional[bool] = Field(
        None, description='Is product available or not'
    )
    views: Optional[int] = Field(None, description='Product views count')
    sale_price: Optional[SalePrice] = Field(
        None, description='Product sale price details'
    )
    sale_end: Optional[str] = Field(None, description='Product sale end')
    require_shipping: Optional[bool] = Field(
        None, description='determent if the product require shipping or not.'
    )
    cost_price: Optional[float] = Field(None, description='Product cost price')
    weight: Optional[float] = Field(
        None, description='if applicable the weight of the product.'
    )
    with_tax: Optional[bool] = Field(
        None, description='Is there a tax applied to th product or not'
    )
    url: Optional[str] = Field(None, description='Product url')
    images: Optional[List[Image]] = Field(
        None, description='Product images', min_items=1
    )
    sold_quantity: Optional[int] = Field(None, description='Product sold quantity')
    sold_quantity_desc: Optional[str] = Field(
        None, description='Product sold quantity description'
    )
    rating: Optional[Rating] = Field(None, description='Product rating details')
    show_purchase_count: Optional[bool] = Field(
        None, description='if to show purchase count or not'
    )
    has_special_price: Optional[bool] = Field(
        None, description='Is this product has a special price'
    )
    regular_price: Optional[RegularPrice] = Field(
        None, description='Product regular price details'
    )
    features: Optional[Features] = Field(None, description='Products features')
    max_items_per_user: Optional[float] = Field(
        None, description='Maximum product items for each user.'
    )
    allow_attachments: Optional[bool] = Field(
        None, description='Allow attachments or not'
    )
    is_pinned: Optional[bool] = Field(None, description='Is product pinned or not')
    pinned_date: Optional[str] = Field(None, description='When the product was pinned')
    active_advance: Optional[bool] = Field(
        None, description='Activate advanced product details or not'
    )
    enable_upload_image: Optional[bool] = Field(
        None, description='Enable users uplod image or not'
    )
    updated_at: Optional[str] = Field(None, description='Product last updated at')
    options: Optional[List[ProductOption]] = Field(
        None, description='Product optio', min_items=0
    )
    skus: Optional[List[Sku]] = Field(None, description='Product options SKUs Details')
    categories: Optional[List[Category]]
    brand: Optional[Brand]


class OrderResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[Order]


class OrdersResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[List[OrderCard]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


class ProductResponse(BaseModel):
    status: Optional[float] = Field(None, description='Response status code')
    success: Optional[bool] = Field(None, description='Response flag')
    data: Optional[ProductDetails]


class ProductsResponse(BaseModel):
    success: Optional[bool] = Field(None, description='Response flag')
    status: Optional[float] = Field(None, description='Response status code')
    data: Optional[List[ProductDetails]] = Field(None, min_items=1)
    pagination: Optional[Pagination]


Category.update_forward_refs()
